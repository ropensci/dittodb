[{"path":[]},{"path":"https://dittodb.jonkeane.com/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://dittodb.jonkeane.com/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://dittodb.jonkeane.com/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://dittodb.jonkeane.com/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://dittodb.jonkeane.com/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [jkeane@gmail.com]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://dittodb.jonkeane.com/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://dittodb.jonkeane.com/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://dittodb.jonkeane.com/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://dittodb.jonkeane.com/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://dittodb.jonkeane.com/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://dittodb.jonkeane.com/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://dittodb.jonkeane.com/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to {dittodb}","title":"Contributing to {dittodb}","text":"outlines propose change {dittodb}. detailed information developing {dittodb} see developing {dittodb} vignette.","code":""},{"path":"https://dittodb.jonkeane.com/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to {dittodb}","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. love getting help ! Yes, please: edit roxygen comment .R file R/ directory. , thanks: edit .Rd file man/ directory.","code":""},{"path":"https://dittodb.jonkeane.com/dev/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Contributing to {dittodb}","text":"order waste effort time, make substantial pull request, file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://dittodb.jonkeane.com/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing to {dittodb}","text":"recommend create new git branch pull request (PR). Look GitHub Actions build status making changes. use roxygen2, Markdown syntax, documentation. use testthat. Contributions test cases included easier accept. New code generally follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR.","code":""},{"path":"https://dittodb.jonkeane.com/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to {dittodb}","text":"Please note {dittodb} project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":[]},{"path":"https://dittodb.jonkeane.com/dev/ISSUE_TEMPLATE.html","id":"the-kind-of-database-backend-you-are-trying-to-test","dir":"","previous_headings":"","what":"The kind of database backend you are trying to test","title":"NA","text":"","code":"# insert reprex here"},{"path":"https://dittodb.jonkeane.com/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://dittodb.jonkeane.com/dev/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://dittodb.jonkeane.com/dev/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://dittodb.jonkeane.com/dev/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://dittodb.jonkeane.com/dev/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://dittodb.jonkeane.com/dev/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://dittodb.jonkeane.com/dev/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://dittodb.jonkeane.com/dev/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://dittodb.jonkeane.com/dev/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://dittodb.jonkeane.com/dev/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://dittodb.jonkeane.com/dev/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives. files R/recording.R, R/mock-paths.R, use-dittodb.r, test-use-dittodb.R adapted Neal Richardson’s httptest package (https://github.com/nealrichardson/httptest/) licensed MIT license. MIT License (MIT) Copyright (c) 2016 Neal Richardson Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE. files src/init.c src/reassign.c adapted Hadley Wickham’s RStudio’s testthat package (https://github.com/r-lib/testthat/) licensed MIT license. MIT License (MIT) Copyright (c) 2013-2019 Hadley Wickham; RStudio Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":"Copyright 2019 apache2  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://dittodb.jonkeane.com/dev/articles/developing-dittodb.html","id":"setting-up-databases","dir":"Articles","previous_headings":"","what":"Setting up databases","title":"Developing {dittodb}","text":"order fully test {dittodb} works, aim full coverage test many database backends possible recording using mocked database. continuous integration (CI short) can finicky get working (CI front, , can use {dittodb} won’t setup database backend just run tests!). Frankly, even set locally second computer can pain! include repository scripts make (relatively) easy setup testing database backends, well scripts use setup database backends GitHub Actions.","code":""},{"path":"https://dittodb.jonkeane.com/dev/articles/developing-dittodb.html","id":"what-we-test","dir":"Articles","previous_headings":"Setting up databases","what":"What we test","title":"Developing {dittodb}","text":"currently test following database backends GitHub Actions CI: Postgres (drivers: RPostgres, RPostgreSQL, odbc) MariaDB (driver: RMariaDB) SQLite (driver: RSQLite)","code":""},{"path":"https://dittodb.jonkeane.com/dev/articles/developing-dittodb.html","id":"how-to-setup-test-databases-locally","dir":"Articles","previous_headings":"Setting up databases","what":"How to setup test databases locally","title":"Developing {dittodb}","text":"(exception SQLite) tested test file test-dbi-generic-integration.R. However, tests database run specific environment variables set trigger . reason easy test locally without needing setup databases, covered tests run GitHub Actions. like run tests locally, can set following environment variables run tests usual (e.g. R CMD check, devtools::check(), devtools::test()) DITTODB_ENABLE_PG_TESTS TRUE, Postgres-based tests run DITTODB_ENABLE_MARIA_TESTS TRUE, MariaDB-based tests run scripts included db-setup folder helpful setting databases. local tests, highly recommend using docker scripts: db-setup/local-mariadb-docker-setup.sh starts (stops starts ’s already running) docker container, installs MariaDB container (running default port 3306), loads correct test user test data database running tests. db-setup/local-postgres-docker-setup.sh starts (stops starts ’s already running) docker container, installs Postgres container (running default port 5432), loads correct test user test data database running tests. ’ve already got databases running default ports (3306 MariaDB 5432 Postgres) want use docker scripts, recommend change ports docker using databases ’re already running. can use DITTODB_MARIA_TEST_PORT DITTODB_PG_TEST_PORT environment variables change port {dittodb} uses connect test databases. docker scripts use environment variables map ports set (exported) convenience. One thing note: {dittodb} tests, database drivers attempt connect -running --wrong-port database backends, can segfault instead erroring informative error. see , first thing check port variables set correctly database backend running normally. utilize SQL (Structured Query Language) scripts respective backends. might useful ’re manually adding test data database already running, ’re using docker scripts , shouldn’t need use . db-setup/[mariadb|postgres]-reset.sql creates database nycflights test users (dropping already exist fresh). db-setup/[mariadb|postgres]-nycflights.sql creates necessary tables nycflights database use testing. db-setup/populate-dbs.sh uses scripts populate databases GitHub Actions.","code":""},{"path":"https://dittodb.jonkeane.com/dev/articles/developing-dittodb.html","id":"what-not-to-run","dir":"Articles","previous_headings":"Setting up databases","what":"☠️ What not to run ☠️","title":"Developing {dittodb}","text":"scripts (e.g. db-setup/[mariadb|postgres]-brew.sh db-setup/[mariadb|postgres]-docker-container-.sh) intended use GitHub Actions run locally. include commands remove files necessary reset database setups allow tests run. Running locally delete files might care .","code":""},{"path":"https://dittodb.jonkeane.com/dev/articles/developing-dittodb.html","id":"some-of-the-tricky-bits-that-dittodb-uses","dir":"Articles","previous_headings":"","what":"Some of the tricky bits that {dittodb} uses","title":"Developing {dittodb}","text":"order provide seamless experience using real database connection using mocked version database {dittodb} uses features R pretty uncommon. intended comprehensive description {dittodb}’s architecture, things uncommon little strange.","code":""},{"path":"https://dittodb.jonkeane.com/dev/articles/developing-dittodb.html","id":"recording","dir":"Articles","previous_headings":"Some of the tricky bits that {dittodb} uses","what":"Recording","title":"Developing {dittodb}","text":"order record fixtures using real database connection, use base::trace() add code inspects queries (define unique hashes) saves results can used later. tracing happens using start_db_capturing() functions generally used testing packages use {dittodb}. Rather, functionality generally used see interactions piece code tested database either use edit use fixtures produces testing.","code":""},{"path":"https://dittodb.jonkeane.com/dev/articles/developing-dittodb.html","id":"using-a-mocked-database","dir":"Articles","previous_headings":"Some of the tricky bits that {dittodb} uses","what":"Using a mocked database","title":"Developing {dittodb}","text":"using fixtures (.e. mocked database), use internals mock DBI::dbConnect() function replace true connection special mock connection class {dittodb} (DBIMockConnection, though specific sub-classes drivers, e.g. DBIMockRPostgresConnection). {dittodb} relies standard S4 method dispatch find appropriate fixture queries run testing.","code":""},{"path":"https://dittodb.jonkeane.com/dev/articles/dittodb.html","id":"our-function-mean_delays","dir":"Articles","previous_headings":"","what":"Our function mean_delays()","title":"Getting Started with {dittodb}","text":"get started, imagine working package queries database consists nycflights13 data1. following function takes column aggregate returns dataframe column mean delay groups based values column name given.","code":""},{"path":"https://dittodb.jonkeane.com/dev/articles/dittodb.html","id":"section","dir":"Articles","previous_headings":"","what":"Getting Started with {dittodb}","title":"Getting Started with {dittodb}","text":"RMariaDB RPostgres RSQLite","code":"library(DBI)  mean_delays <- function(group_col) {   con <- dbConnect(     RMariaDB::MariaDB(),     dbname = \"nycflights\"   )   on.exit(dbDisconnect(con))    query <- glue::glue(     \"SELECT {group_col}, AVG(arr_delay) as mean_delay from nycflights13.flights \",     \"WHERE arr_delay > 0 GROUP BY {group_col}\"   )    return(dbGetQuery(con, query)) } library(DBI)  mean_delays <- function(group_col) {   con <- dbConnect(     RPostgres::Postgres(),     dbname = \"nycflights\"   )   on.exit(dbDisconnect(con))    query <- glue::glue(     \"SELECT {group_col}, AVG(arr_delay) as mean_delay from nycflights13.flights \",     \"WHERE arr_delay > 0 GROUP BY {group_col}\"   )    return(dbGetQuery(con, query)) } library(DBI)  mean_delays <- function(group_col) {   con <- dbConnect(     RSQLite::SQLite(),     dbname = \"nycflights\"   )   on.exit(dbDisconnect(con))    query <- glue::glue(     \"SELECT {group_col}, AVG(arr_delay) as mean_delay from nycflights13.flights \",     \"WHERE arr_delay > 0 GROUP BY {group_col}\"   )    return(dbGetQuery(con, query)) }"},{"path":"https://dittodb.jonkeane.com/dev/articles/dittodb.html","id":"section-1","dir":"Articles","previous_headings":"","what":"Getting Started with {dittodb}","title":"Getting Started with {dittodb}","text":"give column \"month\", get following dataframe: Great, now function want test make sure operating expected. Normally, write something like: works just fine ever run tests locally, want run tests Continuous Integration system (yes, want !), won’t work without first setting production database flights. tests, don’t actually need connect database get new data (, fact, make tests fail erroneously suddenly underlying changed). Instead, want take snapshot happens running test code, able use snapshot run tests later. snapshots frequently called fixtures (though might hear people use names like stubs mocks).","code":"mean_delays(\"month\") #>    month mean_delay #> 1      1   34.47749 #> 2      2   33.68921 #> 3      3   40.57166 #> 4      4   42.73958 #> 5      5   41.88586 #> 6      6   53.73827 #> 7      7   53.95152 #> 8      8   39.51294 #> 9      9   38.80555 #> 10    10   29.03665 #> 11    11   27.48459 #> 12    12   39.72725 library(testthat)  test_that(\"mean_delays()\", {   out <- mean_delays(\"month\")   expect_named(out, c(\"month\", \"mean_delay\"))   expect_equal(dim(out), c(12, 2)) })"},{"path":"https://dittodb.jonkeane.com/dev/articles/dittodb.html","id":"recording-fixtures","dir":"Articles","previous_headings":"","what":"Recording fixtures","title":"Getting Started with {dittodb}","text":"can record fixtures database interactions commands start_db_capturing(), run functions want record, stop recording stop_db_capturing(). write new folder (default ./tests/testthat/) name database (: nycflights) write one file name SELECT-e53189.R fixture example. SELECT-* file contains data received database use tests.","code":"start_db_capturing() out <- mean_delays(\"month\") stop_db_capturing()"},{"path":"https://dittodb.jonkeane.com/dev/articles/dittodb.html","id":"with_mock_db","dir":"Articles","previous_headings":"","what":"with_mock_db()","title":"Getting Started with {dittodb}","text":"Now fixture, can use fixture wrapping call includes database interaction function with_mock_db(). look fixtures use . , now can write tests like: placed inside with_mock_db(...) call mean_delays(\"month\") return saved fixture actually connected database without needing database installed, reachable, operational, exist anywhere. wanted test day-based aggregation works, can! Although make new fixture. First run following interactively: create new file (SELECT-16d120.R) contains response aggregating day. dittodb saves database interaction hash query sent, number different responses database can saved correct one used called inside with_mock_db(...). now, write new test :","code":"with_mock_db(   mean_delays(\"month\") ) #>    month mean_delay #> 1      1   34.47749 #> 2      2   33.68921 #> 3      3   40.57166 #> 4      4   42.73958 #> 5      5   41.88586 #> 6      6   53.73827 #> 7      7   53.95152 #> 8      8   39.51294 #> 9      9   38.80555 #> 10    10   29.03665 #> 11    11   27.48459 #> 12    12   39.72725 library(testthat) library(dittodb)  with_mock_db(   test_that(\"mean_delays()\", {     out <- mean_delays(\"month\")     expect_named(out, c(\"month\", \"mean_delay\"))     expect_equal(dim(out), c(12, 2))   }) ) #> Test passed #> [1] TRUE start_db_capturing() out <- mean_delays(\"day\") stop_db_capturing() with_mock_db(   test_that(\"mean_delays()\", {     out <- mean_delays(\"day\")     expect_named(out, c(\"day\", \"mean_delay\"))     expect_equal(dim(out), c(31, 2))   }) ) #> Test passed #> [1] TRUE"},{"path":"https://dittodb.jonkeane.com/dev/articles/dittodb.html","id":"getting-setup-to-use-dittodb","dir":"Articles","previous_headings":"","what":"Getting setup to use {dittodb}","title":"Getting Started with {dittodb}","text":"Use function dittodb::use_dittodb() easily get started using {dittodb}. add {dittodb} Suggests DESCRIPTION file add library(dittodb) tests/testthat/helper.R.","code":""},{"path":"https://dittodb.jonkeane.com/dev/articles/dittodb.html","id":"things-to-be-careful-about","dir":"Articles","previous_headings":"","what":"Things to be careful about","title":"Getting Started with {dittodb}","text":"things careful using dittodb.","code":""},{"path":"https://dittodb.jonkeane.com/dev/articles/dittodb.html","id":"when-to-call-dbconnect","dir":"Articles","previous_headings":"Things to be careful about","what":"When to call dbConnect()","title":"Getting Started with {dittodb}","text":"Always call dbConnect() inside with_mock_db(...). can make many calls want mock database inside with_mock_db(...), always make sure connect database inside outside with_mock_db(...). “connect” mock database, variables set tell dittodb look mocks. ’s less important (though still good idea) call dbDisconnect() inside with_mock_db(). also true recording fixtures start_db_recording(), start recording call dbConnect().","code":""},{"path":"https://dittodb.jonkeane.com/dev/articles/dittodb.html","id":"query-size","dir":"Articles","previous_headings":"Things to be careful about","what":"Query size","title":"Getting Started with {dittodb}","text":"Recording fixtures saves whole query disk relatively inefficient way (data storage perspective), careful save. ’ll want save extremely large results possible. also best-practice writing tests anyway: mocks minimal possible test functionality need . Minimal mocks make easier change things aren’t relevant test (don’t change way data represented ’s important ’re testing) makes tests run faster.","code":""},{"path":"https://dittodb.jonkeane.com/dev/articles/dittodb.html","id":"advanced-uses","dir":"Articles","previous_headings":"","what":"Advanced uses","title":"Getting Started with {dittodb}","text":"number advanced features might useful. However take bit configuration use.","code":""},{"path":"https://dittodb.jonkeane.com/dev/articles/dittodb.html","id":"specify-a-new-path","dir":"Articles","previous_headings":"Advanced uses","what":"Specify a new path","title":"Getting Started with {dittodb}","text":"can control mocks read (’re using with_mock_db(...)) well written (using start_db_capturing()). , use function db_mock_paths(). can see paths used calling db_mock_paths() arguments. dittodb look mocks path starting first one. recording mocks, dittodb always uses first path returned db_mock_paths(). can add new path calling db_mock_paths(\"new/path/\") add path provided top list paths use.","code":""},{"path":"https://dittodb.jonkeane.com/dev/articles/dittodb.html","id":"redacting","dir":"Articles","previous_headings":"Advanced uses","what":"Redacting","title":"Getting Started with {dittodb}","text":"Sometimes (much? ? time!) sensitive data database don’t actually want put test fixtures. {dittodb} allows specify columns always redacted specifying like : always redact columns “sensitive_column” “other_sensitive_column” every time query recorded includes either. redactor replaces every value column standard value (example “[redacted]” characters, 9 numerics, 1988-10-11T17:00:00 date times) see redact_columns() information.","code":"start_db_capturing(redact_columns = c(\"sensitive_column\", \"other_sensitive_column\"))"},{"path":"https://dittodb.jonkeane.com/dev/articles/dittodb.html","id":"you-too-can-write-a-fixture","dir":"Articles","previous_headings":"Advanced uses","what":"You, too, can write a fixture!","title":"Getting Started with {dittodb}","text":"use start_db_recording() record fixtures, creating people call fixtures (though terms abound). files used testing represent provide data state necessary execute test. case dittodb, files contain data dittodb uses pretends live database. recording, query sent database gets unique identifier (first 6 digits hash query) response received, response saved file first SQL (Structured Query Language) verb (e.g. SELECT), dash, hash using dput() function. lets craft fixture tests exactly need without extraneous rows columns might relevant. can save responses queries getting figuring hash (easiest way now write test want create fixture , run see error message looks something like “Couldn’t find file nycflights/SELECT-16d120.R mock directories.” use filename .) saving dataframe want test use command dput(df, file = \"nycflights/SELECT-16d120.R\", control = c(\"\", \"hexNumeric\")) (dataframe want save df using path saw example error message). ’ve created fixture! can also take approach recording fixtures editing manually pare . workflow something like:","code":"# read in the recorded fixture df_fixt <- source(\"nycflights/SELECT-16d120.R\", keep.source = FALSE)$value  # filter out anything after february and all days after the 9th of the month df_fixt <- dplyr::filter(df_fixt, month <= 2 & day < 10)  # save the fixture for use in tests dput(df_fixt, file = \"nycflights/SELECT-16d120.R\", control = c(\"all\", \"hexNumeric\"))"},{"path":"https://dittodb.jonkeane.com/dev/articles/nycflights.html","id":"exploring-nycflights13","dir":"Articles","previous_headings":"","what":"Exploring {nycflights13}","title":"nycflights13 data","text":"{nycflights13} dataset contains airline -time data flights departing NYC 2013. also includes useful metadata airlines, airports, weather, planes. look database schema: {nycflights13} relational diagram.","code":""},{"path":"https://dittodb.jonkeane.com/dev/articles/nycflights.html","id":"nycflights13-test-database","dir":"Articles","previous_headings":"","what":"{nycflights13} test database","title":"nycflights13 data","text":"{dittodb} comes small subset {nycflights13} used testing examples. access , use convenience function nycflights_sqlite() return RSQLite connection nycflights.sqlite file included {dittodb}. Alternatively, can connect file system.file(\"nycflights.sqlite\", package = \"dittodb\").","code":""},{"path":"https://dittodb.jonkeane.com/dev/articles/nycflights.html","id":"adding-nycflights13-data-to-a-database","dir":"Articles","previous_headings":"","what":"Adding {nycflights13} data to a database","title":"nycflights13 data","text":"{dittodb} functions make loading {nycflights13} data database easier. nycflights13_create_sql(con, schema = \"nycflights\") write {nycflights13} data database connect con write schema nycflights. quickly set SQLite version nycflights13_create_sql() create -memory SQLite database {nycflights13} data.","code":""},{"path":"https://dittodb.jonkeane.com/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jonathan Keane. Author, maintainer. Mauricio Vargas. Author. Helen Miller. Reviewer.            reviewed package rOpenSci, see https://github.com/ropensci/software-review/issues/366 Etienne Racine. Reviewer.            reviewed package rOpenSci, see https://github.com/ropensci/software-review/issues/366","code":""},{"path":"https://dittodb.jonkeane.com/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Keane J, Vargas M (2024). dittodb: Test Environment Database Requests. R package version 0.1.7.9000, https://github.com/ropensci/dittodb, https://dittodb.jonkeane.com/.","code":"@Manual{,   title = {dittodb: A Test Environment for Database Requests},   author = {Jonathan Keane and Mauricio Vargas},   year = {2024},   note = {R package version 0.1.7.9000, https://github.com/ropensci/dittodb},   url = {https://dittodb.jonkeane.com/}, }"},{"path":"https://dittodb.jonkeane.com/dev/index.html","id":"dittodb","dir":"","previous_headings":"","what":"A Test Environment for Database Requests","title":"A Test Environment for Database Requests","text":"{dittodb} package makes testing databases easy. writing code relies interactions databases, testing difficult without recreating test databases continuous integration (aka CI) environment, resorting using SQLite databases instead database engines production. downsides: recreating database infrastructure slow, error prone, hard iterate . Using SQLite works well, right use feature (like full outer join) quirks might differ production database. {dittodb} solves recording database interactions, saving mocks, replaying seamlessly testing. means can get query database, can record response reliably reproduce response tests. {dittodb} heavily inspired {httptest}, ’ve used {httptest} , ’ll find many interactions similar.","code":""},{"path":"https://dittodb.jonkeane.com/dev/index.html","id":"a-quick-example","dir":"","previous_headings":"","what":"A quick example","title":"A Test Environment for Database Requests","text":"Say database {nycflights} data writing functions query data want test. example, simple function retrieves one airline: want make sure function returns expect. , first record response get production database:","code":"get_an_airline <- function(con) {   return(dbGetQuery(con, \"SELECT carrier, name FROM airlines LIMIT 1\")) }"},{"path":"https://dittodb.jonkeane.com/dev/index.html","id":"section","dir":"","previous_headings":"","what":"A Test Environment for Database Requests","title":"A Test Environment for Database Requests","text":"RMariaDB RPostgres RSQLite","code":"start_db_capturing()  con <- DBI::dbConnect(   RMariaDB::MariaDB(),   dbname = \"nycflights\" )  get_an_airline(con) DBI::dbDisconnect(con)  stop_db_capturing() start_db_capturing()  con <- DBI::dbConnect(   RPostgres::Postgres(),   dbname = \"nycflights\" )  get_an_airline(con) DBI::dbDisconnect(con)  stop_db_capturing() start_db_capturing()  con <- DBI::dbConnect(RSQLite::SQLite(), \"nycflights\")  get_an_airline(con) DBI::dbDisconnect(con)  stop_db_capturing()"},{"path":"https://dittodb.jonkeane.com/dev/index.html","id":"section-1","dir":"","previous_headings":"","what":"A Test Environment for Database Requests","title":"A Test Environment for Database Requests","text":"run query get_an_airline(), save response mock directory file. , testing, can use following: RMariaDB RPostgres RSQLite","code":"with_mock_db({   con <- DBI::dbConnect(     RMariaDB::MariaDB(),     dbname = \"nycflights\"   )      test_that(\"We get one airline\", {     one_airline <- get_an_airline(con)     expect_s3_class(one_airline, \"data.frame\")     expect_equal(nrow(one_airline), 1)     expect_equal(one_airline$carrier, \"9E\")     expect_equal(one_airline$name, \"Endeavor Air Inc.\")   }) }) with_mock_db({   con <- DBI::dbConnect(     RPostgres::Postgres(),     dbname = \"nycflights\"   )      test_that(\"We get one airline\", {     one_airline <- get_an_airline(con)     expect_s3_class(one_airline, \"data.frame\")     expect_equal(nrow(one_airline), 1)     expect_equal(one_airline$carrier, \"9E\")     expect_equal(one_airline$name, \"Endeavor Air Inc.\")   }) }) with_mock_db({   con <- DBI::dbConnect(RSQLite::SQLite(), \"nycflights\")      test_that(\"We get one airline\", {     one_airline <- get_an_airline(con)     expect_s3_class(one_airline, \"data.frame\")     expect_equal(nrow(one_airline), 1)     expect_equal(one_airline$carrier, \"9E\")     expect_equal(one_airline$name, \"Endeavor Air Inc.\")   }) })"},{"path":"https://dittodb.jonkeane.com/dev/index.html","id":"section-2","dir":"","previous_headings":"","what":"A Test Environment for Database Requests","title":"A Test Environment for Database Requests","text":"without ever set database Travis GitHub Actions 🎉","code":""},{"path":"https://dittodb.jonkeane.com/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Test Environment for Database Requests","text":"Currently, {dittodb} CRAN (Comprehensive R Archive Network), can install install.packages(\"dittodb\").","code":""},{"path":"https://dittodb.jonkeane.com/dev/index.html","id":"installing-a-development-version","dir":"","previous_headings":"Installation","what":"Installing a development version","title":"A Test Environment for Database Requests","text":"like use development version, can install GitHub : remotes::install_github(\"ropensci/dittodb\") Note may need add @main end using version {remotes} prior 2.2.0. Alternatively, can use remotes::install_git() directly: remotes::install_git(\"https://github.com/ropensci/dittodb.git\")","code":""},{"path":"https://dittodb.jonkeane.com/dev/index.html","id":"setup-a-package-to-use-dittodb","dir":"","previous_headings":"","what":"Setup a package to use {dittodb}","title":"A Test Environment for Database Requests","text":"Use function dittodb::use_dittodb() easily get started using {dittodb}. add {dittodb} Suggests DESCRIPTION file add library(dittodb) tests/testthat/helper.R.","code":""},{"path":"https://dittodb.jonkeane.com/dev/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"A Test Environment for Database Requests","text":"extensive information developing {dittodb} vignette Developing {dittodb}, please read trying make changes {dittodb} running scripts provided db-setup directory. order test {dittodb} recording functionality locally continuous integration, helpful databases test data available. can accomplished using scripts db-setup directory. default, {dittodb} run tests require database infrastructure locally. get local databases, easiest way use docker run either db-setup/local-mariadb-docker-setup.sh db-setup/local-postgres-docker-setup.sh pull docker image set test database user passwords {dittodb} tests expecting (stop remove docker images present). continuous integration, (using GitHub Actions) scripts db-setup directory used set test databases can run integration tests (predominantly file tests/testthat/test-dbi-generic-integration.R).","code":""},{"path":"https://dittodb.jonkeane.com/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"A Test Environment for Database Requests","text":"Please note {dittodb} project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/capture_requests.html","id":null,"dir":"Reference","previous_headings":"","what":"Capture and record database transactions and save them as mocks — capture_requests","title":"Capture and record database transactions and save them as mocks — capture_requests","text":"creating database fixtures, can sometimes helpful record responses database use crafting tests.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/capture_requests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capture and record database transactions and save them as mocks — capture_requests","text":"","code":"start_db_capturing(path, redact_columns = NULL)  stop_db_capturing()  capture_db_requests(expr, path, redact_columns = NULL)"},{"path":"https://dittodb.jonkeane.com/dev/reference/capture_requests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capture and record database transactions and save them as mocks — capture_requests","text":"path path record mocks (default missing: first path db_mock_paths(). redact_columns character vector columns redact. column matches entry redacted standard value column type (e.g. characters replaced \"[redacted]\") expr expression evaluate capturing requests (capture_db_requests())","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/capture_requests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capture and record database transactions and save them as mocks — capture_requests","text":"NULL (invisibily)","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/capture_requests.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Capture and record database transactions and save them as mocks — capture_requests","text":"can start capturing start_db_capturing() end stop_db_capturing(). queries run database executed like normal, responses saved mock path given, use queries later inside with_mock_db block, database functions return run database. Alternatively, can wrap code trying capture function capture_db_requests({...}) thing start_db_capturing() stop_db_capturing() without needing remember stop recording. can redact certain columns using redact_columns argument. replace values column generic redacted version. works always passing data saved redact_columns. note always call DBI::dbConnect inside capturing block. connect database, dittodb sets mocks specific database connecting call DBI::dbConnect.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/capture_requests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Capture and record database transactions and save them as mocks — capture_requests","text":"","code":"# \\donttest{ if (check_for_pkg(\"RSQLite\", message)) {   # Temporary files for examples   nycflights_path <- tempfile()    con <- nycflights13_create_sqlite(location = nycflights_path)   dbDisconnect(con)    start_db_capturing()   con <- dbConnect(RSQLite::SQLite(), nycflights_path)    df_1 <- dbGetQuery(con, \"SELECT * FROM airlines LIMIT 1\")   res <- dbSendQuery(con, \"SELECT * FROM airlines LIMIT 2\")   df_2 <- dbFetch(res)   dbClearResult(res)    dbDisconnect(con)   stop_db_capturing()    start_db_capturing(redact_columns = \"carrier\")   con <- dbConnect(RSQLite::SQLite(), nycflights_path)    df_3 <- dbGetQuery(con, \"SELECT * FROM airlines LIMIT 3\")    dbDisconnect(con)   stop_db_capturing()    with_mock_db({     con <- dbConnect(RSQLite::SQLite(), nycflights_path)      # the result from df1 above     print(dbGetQuery(con, \"SELECT * FROM airlines LIMIT 1\"))      # the result from df3 above     print(dbGetQuery(con, \"SELECT * FROM airlines LIMIT 3\"))   }) } #> Creating the testing database from nycflights13 #> Creating table: airlines #> Creating table: airports #> Creating table: flights #> Creating table: planes #> Creating table: weather #>   carrier              name #> 1      9E Endeavor Air Inc. #>      carrier                   name #> 1 [redacted]      Endeavor Air Inc. #> 2 [redacted] American Airlines Inc. #> 3 [redacted]   Alaska Airlines Inc. #>      carrier                   name #> 1 [redacted]      Endeavor Air Inc. #> 2 [redacted] American Airlines Inc. #> 3 [redacted]   Alaska Airlines Inc. # }"},{"path":"https://dittodb.jonkeane.com/dev/reference/check_for_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a package is installed — check_for_pkg","title":"Check if a package is installed — check_for_pkg","text":"Uses requireNamespace() check package already installed provides options issuing error, warning, etc. case package installed.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/check_for_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a package is installed — check_for_pkg","text":"","code":"check_for_pkg(package, func = stop)"},{"path":"https://dittodb.jonkeane.com/dev/reference/check_for_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a package is installed — check_for_pkg","text":"package name package check func check call package installed? can function, stop, warning, skip, etc. likely candidates (default: stop)","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/check_for_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a package is installed — check_for_pkg","text":"TRUE package installed, FALSE (invisibly)","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/check_for_pkg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if a package is installed — check_for_pkg","text":"exported use examples.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/check_for_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a package is installed — check_for_pkg","text":"","code":"check_for_pkg(\"DBI\") check_for_pkg(\"no-such-package\", func = message) #> The package no-such-package isn't installed but is needed for this action. #> Please install it with install.packages(\"no-such-package\") and try again."},{"path":"https://dittodb.jonkeane.com/dev/reference/clean_statement.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean a statement string — clean_statement","title":"Clean a statement string — clean_statement","text":"SQL statement strings sometimes characters specifications change meaning determined query time. avoid , hashing statement clean/strip statement","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/clean_statement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean a statement string — clean_statement","text":"","code":"clean_statement(string)"},{"path":"https://dittodb.jonkeane.com/dev/reference/clean_statement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean a statement string — clean_statement","text":"string SQL statement clean","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/clean_statement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean a statement string — clean_statement","text":"SQL statement stripped extraneous bits","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/db_path_sanitize.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch illegal characters for legal ones — db_path_sanitize","title":"Switch illegal characters for legal ones — db_path_sanitize","text":"Inspired fs package's path_sanitize function","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/db_path_sanitize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch illegal characters for legal ones — db_path_sanitize","text":"","code":"db_path_sanitize(filename, replacement = \"_\")"},{"path":"https://dittodb.jonkeane.com/dev/reference/db_path_sanitize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch illegal characters for legal ones — db_path_sanitize","text":"filename file folder sanitize replacement illegal character(s) replaced ? (default: \"_\")","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/db_path_sanitize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Switch illegal characters for legal ones — db_path_sanitize","text":"sanitized string","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/db_path_sanitize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Switch illegal characters for legal ones — db_path_sanitize","text":"","code":"db_path_sanitize('this:string\"has?issues') #> [1] \"this_string_has_issues\""},{"path":"https://dittodb.jonkeane.com/dev/reference/dittodb_debug_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the dittodb debug level and evaluate if it is above a level — dittodb_debug_level","title":"Get the dittodb debug level and evaluate if it is above a level — dittodb_debug_level","text":"Get dittodb debug level evaluate level","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/dittodb_debug_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the dittodb debug level and evaluate if it is above a level — dittodb_debug_level","text":"","code":"dittodb_debug_level(level)"},{"path":"https://dittodb.jonkeane.com/dev/reference/dittodb_debug_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the dittodb debug level and evaluate if it is above a level — dittodb_debug_level","text":"level level test (greater equal )","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/dittodb_debug_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the dittodb debug level and evaluate if it is above a level — dittodb_debug_level","text":"logical","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/dittodb_debug_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the dittodb debug level and evaluate if it is above a level — dittodb_debug_level","text":"","code":"dittodb_debug_level(0) #> [1] TRUE dittodb_debug_level(2) #> [1] FALSE"},{"path":"https://dittodb.jonkeane.com/dev/reference/dot-dittodb_env.html","id":null,"dir":"Reference","previous_headings":"","what":"an environment for dittodb storing state — .dittodb_env","title":"an environment for dittodb storing state — .dittodb_env","text":"environment dittodb storing state","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/dot-dittodb_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"an environment for dittodb storing state — .dittodb_env","text":"","code":".dittodb_env"},{"path":"https://dittodb.jonkeane.com/dev/reference/dot-dittodb_env.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"an environment for dittodb storing state — .dittodb_env","text":"object class environment length 1.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/driver-specifc-mock-connections.html","id":null,"dir":"Reference","previous_headings":"","what":"Driver-specific mock classes — driver-specifc-mock-connections","title":"Driver-specific mock classes — driver-specifc-mock-connections","text":"drivers supported mock connection class. inherit DBIMockConnection well driver's connection class. really available corresponding package installed.","code":""},{"path":[]},{"path":"https://dittodb.jonkeane.com/dev/reference/expect_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect if a specific SQL statement is sent — expect_sql","text":"","code":"expect_sql(object, regexp = NULL, ...)"},{"path":"https://dittodb.jonkeane.com/dev/reference/expect_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect if a specific SQL statement is sent — expect_sql","text":"object expression evaluate regexp statement match ... arguments passed testthat::expect_error()","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/expect_sql.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect if a specific SQL statement is sent — expect_sql","text":"Sometimes need check specific SQL statement sent care retrieving results. works raising error contains statement sent database well location result. Currently, expect_sql() works DBI::dbSendQuery() (implementations DBI::dbGetQuery() call DBI::dbSendQuery() internally). Note: function experimental likely evolve time. Please prepared new releases might break backwards compatibility.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/expect_sql.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect if a specific SQL statement is sent — expect_sql","text":"","code":"if (check_for_pkg(\"RSQLite\", message)) {   with_mock_db({     con <- dbConnect(RSQLite::SQLite(), dbname = \"not_a_db\")      expect_sql(       dbGetQuery(con, \"SELECT carrier, name FROM airlines LIMIT 3\"),       \"SELECT carrier, name FROM airlines LIMIT 3\"     )   }) } #> <simpleError: Fixture: not_a_db/SELECT-4d11cc.R #> SELECT carrier, name FROM airlines LIMIT 3>"},{"path":"https://dittodb.jonkeane.com/dev/reference/get_dbname.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the dbname from a connection call — get_dbname","title":"Get the dbname from a connection call — get_dbname","text":"Get dbname connection call","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/get_dbname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the dbname from a connection call — get_dbname","text":"","code":"get_dbname(dots, drv = NULL)"},{"path":"https://dittodb.jonkeane.com/dev/reference/get_dbname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the dbname from a connection call — get_dbname","text":"dots argument passed connection drv argument passed connection","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/get_dbname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the dbname from a connection call — get_dbname","text":"name, sanitized needed","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/get_redactor.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the current redactor — get_redactor","title":"Get the current redactor — get_redactor","text":"function generally used, must exported query recording function work properly","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/get_redactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the current redactor — get_redactor","text":"","code":"get_redactor()"},{"path":"https://dittodb.jonkeane.com/dev/reference/get_redactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the current redactor — get_redactor","text":"current list columns redact","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/get_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the type of an SQL statement — get_type","title":"Get the type of an SQL statement — get_type","text":"Get type SQL statement","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/get_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the type of an SQL statement — get_type","text":"","code":"get_type(statement)"},{"path":"https://dittodb.jonkeane.com/dev/reference/get_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the type of an SQL statement — get_type","text":"statement statement extract first word ","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/get_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the type of an SQL statement — get_type","text":"first word statement","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/hash.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a (short) hash from a string — hash","title":"Make a (short) hash from a string — hash","text":"Make (short) hash string","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/hash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a (short) hash from a string — hash","text":"","code":"hash(string, n = 6)"},{"path":"https://dittodb.jonkeane.com/dev/reference/hash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a (short) hash from a string — hash","text":"string string hash n long hash ? (default: 6)","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/hash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a (short) hash from a string — hash","text":"hash string","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/hash_db_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a hash from a (result) object — hash_db_object","title":"Extract a hash from a (result) object — hash_db_object","text":"function generally used, must exported query recording function work properly","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/hash_db_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a hash from a (result) object — hash_db_object","text":"","code":"hash_db_object(obj)"},{"path":"https://dittodb.jonkeane.com/dev/reference/hash_db_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a hash from a (result) object — hash_db_object","text":"obj DBI result object hash","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/hash_db_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a hash from a (result) object — hash_db_object","text":"hash object","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/make_path.html","id":null,"dir":"Reference","previous_headings":"","what":"make a mock path — make_path","title":"make a mock path — make_path","text":"make mock path","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/make_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make a mock path — make_path","text":"","code":"make_path(path, type, hash)"},{"path":"https://dittodb.jonkeane.com/dev/reference/make_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make a mock path — make_path","text":"path path look type type query ? (e.g. SELECT, INSERT) hash hash query","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/make_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"make a mock path — make_path","text":"constructed path mock","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/mock-db-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for interacting with DB mocks instead of an actual database — mock-db-methods","title":"Methods for interacting with DB mocks instead of an actual database — mock-db-methods","text":"Various methods (dbSendQuery, dbFetchQuery) mocks DBI methods name. Instead actually interacting database, read mock responses code proceeds . used directly, part dittodb works.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/mock-db-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for interacting with DB mocks instead of an actual database — mock-db-methods","text":"","code":"# S4 method for DBIMockConnection dbDisconnect(conn, ...)  dbMockConnect(drv, ...)  # S4 method for DBIMockConnection,character dbExistsTable(conn, name, ...)  # S4 method for DBIMockConnection,Id dbExistsTable(conn, name, ...)  # S4 method for DBIMockConnection dbListTables(conn, ...)  # S4 method for DBIMockConnection,character dbListFields(conn, name, ...)  # S4 method for DBIMockConnection,Id dbListFields(conn, name, ...)  # S4 method for DBIMockConnection,ANY dbListFields(conn, name, ...)  # S4 method for DBIMockConnection,character dbSendQuery(conn, statement, ...)  # S4 method for DBIMockConnection,SQL dbSendQuery(conn, statement, ...)  # S4 method for DBIMockConnection,character dbSendStatement(conn, statement, ...)  # S4 method for DBIMockResult dbFetch(res, n = -1, ...)  # S4 method for DBIMockResult,ANY fetch(res, n = -1, ...)  # S4 method for DBIMockResult,missing fetch(res, n = -1, ...)  # S4 method for DBIMockResult dbClearResult(res, n, ...)  # S4 method for DBIMockResult dbHasCompleted(res, ...)  # S4 method for DBIMockRPostgreSQLConnection,character dbGetQuery(conn, statement, ...)  # S4 method for DBIMockResult dbGetRowsAffected(res, ...)  # S4 method for DBIMockConnection dbGetInfo(dbObj, ...)  # S4 method for DBIMockConnection,character,data.frame dbWriteTable(conn, name, value, ...)  # S4 method for DBIMockConnection,character dbRemoveTable(conn, name, ...)  # S4 method for DBIMockResult dbColumnInfo(res, ...)  # S4 method for DBIMockResult dbGetInfo(dbObj, ...)  # S4 method for DBIMockRPostgresConnection,character dbQuoteIdentifier(conn, x, ...)  # S4 method for DBIMockRPostgresConnection,SQL dbQuoteIdentifier(conn, x, ...)  # S4 method for DBIMockRPostgresConnection,character dbQuoteString(conn, x, ...)  # S4 method for DBIMockRPostgresConnection,SQL dbQuoteString(conn, x, ...)  # S4 method for DBIMockMariaDBConnection,character dbQuoteString(conn, x, ...)  # S4 method for DBIMockMariaDBConnection,SQL dbQuoteString(conn, x, ...)  # S4 method for DBIMockConnection dbBegin(conn, ..., name = NULL)  # S4 method for DBIMockConnection dbCommit(conn, ..., name = NULL)  # S4 method for DBIMockConnection dbRollback(conn, ..., name = NULL)"},{"path":"https://dittodb.jonkeane.com/dev/reference/mock-db-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for interacting with DB mocks instead of an actual database — mock-db-methods","text":"conn database connection (dispatch methods, class DBIMockConnection) ... arguments passed inside methods drv DB driver use dbConnect name name table (dbListFields, dbWriteTable, dbRemoveTable) statement SQL statement execute res result object (dispatch methods, class DBIMockResult) n number results fetch (ignored) dbObj database object (connection, result, etc.) use dbGetInfo value value (generally data.frame) use dbWriteTable x name quote (dbQuoteIdentifier)","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/mockPaths.html","id":null,"dir":"Reference","previous_headings":"","what":"Set an alternate directory for mock API fixtures — mockPaths","title":"Set an alternate directory for mock API fixtures — mockPaths","text":"default, with_mock_api look mocks relative current working directory (test directory). want look places, can call db_mock_paths add directories search path.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/mockPaths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set an alternate directory for mock API fixtures — mockPaths","text":"","code":"db_mock_paths(new, last = FALSE, replace = FALSE)  .db_mock_paths(new)"},{"path":"https://dittodb.jonkeane.com/dev/reference/mockPaths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set an alternate directory for mock API fixtures — mockPaths","text":"new either character vector path(s) add, NULL reset default. last logical, new path given added end list paths? (default: FALSE) replace logical, path replace current mock paths (TRUE) appended (beginning) current mock paths (default, FALSE)","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/mockPaths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set an alternate directory for mock API fixtures — mockPaths","text":"new omitted, function returns current search paths, character vector. new provided, updated value returned invisibly.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/mockPaths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set an alternate directory for mock API fixtures — mockPaths","text":"works like base::.libPaths(): directories specify added list searched first. default directory searched last. unique values kept: provide path already found db_mock_paths, result effectively moves path first position. capturing fixtures (e.g. start_db_capturing), first path used path save fixtures . reason, may want set last argument TRUE want read directory want write . finer-grained control, completely override defaults additions made calls db_mock_paths(...), can set option \"dittodb.mock.paths\". option \"dittodb.mock.paths\" set used instead paths set db_mock_paths(...) even inside with_mock_path() function similar .mockPaths() httptest function .db_mock_paths db_mock_paths although deprecated used.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/mockPaths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set an alternate directory for mock API fixtures — mockPaths","text":"","code":"# reset mock paths to default db_mock_paths(NULL)  identical(db_mock_paths(), c(\"tests/testthat/\", \".\")) #> [1] TRUE db_mock_paths(\"/var/somewhere/else\") identical(db_mock_paths(), c(\"/var/somewhere/else\", \"tests/testthat/\", \".\")) #> [1] TRUE db_mock_paths(NULL) identical(db_mock_paths(), c(\"tests/testthat/\", \".\")) #> [1] TRUE db_mock_paths(\"/var/somewhere/else\", last = TRUE) identical(db_mock_paths(), c(\"tests/testthat/\", \".\", \"/var/somewhere/else\")) #> [1] TRUE"},{"path":"https://dittodb.jonkeane.com/dev/reference/mockdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Run DBI queries against a mocked database — mockdb","title":"Run DBI queries against a mocked database — mockdb","text":"Wrap chunk code with_mock_db() use mocked databases use fixtures instead connecting real database. Alternatively, can start stop using mocked database start_mock_db() stop_mock_db() respectively.execute whole thing without needing remember stop mocking. testing dittodb, look fixtures entries db_mock_paths.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/mockdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run DBI queries against a mocked database — mockdb","text":"","code":"with_mock_db(expr)  start_mock_db()  stop_mock_db()"},{"path":"https://dittodb.jonkeane.com/dev/reference/mockdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run DBI queries against a mocked database — mockdb","text":"expr expression execute","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/mockdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run DBI queries against a mocked database — mockdb","text":"nothing","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/mockdb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run DBI queries against a mocked database — mockdb","text":"need use one approach: either use start_mock_db() start using mocks stop_mock_db() stop use with_mock_db() wrapped around code want execute mocked database. need () use time. Generally with_mock_db() preferred slightly safer remember stop_mock_db() done. However, easier step tests interactively using start_mock_db()/stop_mock_db(). Connections made start_mock_db() using function made inside with_mock_db() using function dittodb uses database name (given dbname Database argument dbConnect depending driver) separate different fixtures. ODBC connections dsn provided, dsn used directory.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/mockdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run DBI queries against a mocked database — mockdb","text":"","code":"# Add the mocks included with dittodb to the db_mock_paths to use them below db_mock_paths(system.file(\"nycflight_mocks\", package = \"dittodb\"), last = TRUE)  if (check_for_pkg(\"RSQLite\", message) & check_for_pkg(\"testthat\", message)) {   # using  `with_mock_db()`   with_mock_db({     con <- dbConnect(       RSQLite::SQLite(),       dbname = \"nycflights\"     )      testthat::test_that(\"We get one airline\", {       one_airline <- dbGetQuery(         con,         \"SELECT carrier, name FROM airlines LIMIT 1\"       )       testthat::expect_s3_class(one_airline, \"data.frame\")       testthat::expect_equal(nrow(one_airline), 1)       testthat::expect_equal(one_airline$carrier, \"9E\")       testthat::expect_equal(one_airline$name, \"Endeavor Air Inc.\")     })      dbDisconnect(con)   })    # using `start_mock_db()` and `stop_mock_db()`   start_mock_db()   con <- dbConnect(     RSQLite::SQLite(),     dbname = \"nycflights\"   )    testthat::test_that(\"We get one airline\", {     one_airline <- dbGetQuery(       con,       \"SELECT carrier, name FROM airlines LIMIT 1\"     )     testthat::expect_s3_class(one_airline, \"data.frame\")     testthat::expect_equal(nrow(one_airline), 1)     testthat::expect_equal(one_airline$carrier, \"9E\")     testthat::expect_equal(one_airline$name, \"Endeavor Air Inc.\")   })    dbDisconnect(con)   stop_mock_db() } #> Test passed 😀 #> Test passed 🥇"},{"path":"https://dittodb.jonkeane.com/dev/reference/nycflights13_create_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a standardised database for testing — nycflights13_create_sql","title":"Create a standardised database for testing — nycflights13_create_sql","text":"Using connection given con, create database including tables nycflights13 dataset.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/nycflights13_create_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a standardised database for testing — nycflights13_create_sql","text":"","code":"nycflights13_create_sql(con, schema = \"\", ...)"},{"path":"https://dittodb.jonkeane.com/dev/reference/nycflights13_create_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a standardised database for testing — nycflights13_create_sql","text":"con SQL connection (.e PostgreSQL connection) schema schema write tables (\"\", schema default) ... additional parameters connect database","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/nycflights13_create_sql.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a standardised database for testing — nycflights13_create_sql","text":"connection given con invisibly, generally called side effects writing database","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/nycflights13_create_sql.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a standardised database for testing — nycflights13_create_sql","text":"","code":"# \\donttest{ if (check_for_pkg(\"RSQLite\", message)) {   con <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\")    nycflights13_create_sql(con)    DBI::dbGetQuery(     con,     \"SELECT year, month, day, carrier, flight, tailnum FROM flights LIMIT 10\"   )    DBI::dbDisconnect(con) } #> Creating the testing database from nycflights13 #> Creating table: airlines #> Creating table: airports #> Creating table: flights #> Creating table: planes #> Creating table: weather # }"},{"path":"https://dittodb.jonkeane.com/dev/reference/nycflights13_create_sqlite.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an in-memory SQLite database for testing — nycflights13_create_sqlite","title":"Create an in-memory SQLite database for testing — nycflights13_create_sqlite","text":"Create -memory SQLite database testing","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/nycflights13_create_sqlite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an in-memory SQLite database for testing — nycflights13_create_sqlite","text":"","code":"nycflights13_create_sqlite(location = \":memory:\", ...)"},{"path":"https://dittodb.jonkeane.com/dev/reference/nycflights13_create_sqlite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an in-memory SQLite database for testing — nycflights13_create_sqlite","text":"location store database ... additional parameters connect database (passed nycflights13_create_sql)","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/nycflights13_create_sqlite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an in-memory SQLite database for testing — nycflights13_create_sqlite","text":"RSQLiteConnection","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/nycflights13_create_sqlite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an in-memory SQLite database for testing — nycflights13_create_sqlite","text":"","code":"# \\donttest{ if (check_for_pkg(\"RSQLite\", message)) {   con <- nycflights13_create_sqlite()    DBI::dbGetQuery(     con,     \"SELECT year, month, day, carrier, flight, tailnum FROM flights LIMIT 10\"   )    DBI::dbDisconnect(con) } #> Creating the testing database from nycflights13 #> Creating table: airlines #> Creating table: airports #> Creating table: flights #> Creating table: planes #> Creating table: weather # }"},{"path":"https://dittodb.jonkeane.com/dev/reference/nycflights_sqlite.html","id":null,"dir":"Reference","previous_headings":"","what":"An SQLite connection to a subset of nycflights13 — nycflights_sqlite","title":"An SQLite connection to a subset of nycflights13 — nycflights_sqlite","text":"Included dittodb small subset nycflights13 prepopulated sqlite database.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/nycflights_sqlite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An SQLite connection to a subset of nycflights13 — nycflights_sqlite","text":"","code":"nycflights_sqlite()"},{"path":"https://dittodb.jonkeane.com/dev/reference/nycflights_sqlite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An SQLite connection to a subset of nycflights13 — nycflights_sqlite","text":"RSQLiteConnection","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/nycflights_sqlite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An SQLite connection to a subset of nycflights13 — nycflights_sqlite","text":"database helpful getting know dittodb running example code. contains small subset data nycflights13: namely flights planes destination ORD MDW (codes two major airports Chicago) February 2013. airports table also limited New York Chicago area airports.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/nycflights_sqlite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An SQLite connection to a subset of nycflights13 — nycflights_sqlite","text":"","code":"if (check_for_pkg(\"RSQLite\", message)) {   con <- nycflights_sqlite()    DBI::dbGetQuery(con, \"SELECT flight, tailnum, origin, dest FROM flights LIMIT 10\")   DBI::dbGetQuery(con, \"SELECT faa, name, lat, lon, alt, tz FROM airports\")    DBI::dbDisconnect(con) }"},{"path":"https://dittodb.jonkeane.com/dev/reference/redact_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Redact columns from a dataframe with the default redactors — redact_columns","title":"Redact columns from a dataframe with the default redactors — redact_columns","text":"function redacts columns specified columns data given data using dittodb's standard redactors.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/redact_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Redact columns from a dataframe with the default redactors — redact_columns","text":"","code":"redact_columns(data, columns, ignore.case = TRUE, ...)"},{"path":"https://dittodb.jonkeane.com/dev/reference/redact_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Redact columns from a dataframe with the default redactors — redact_columns","text":"data dataframe redact columns character, columns redact ignore.case case ignored? (default: TRUE) ... additional options pass grep() matching column names","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/redact_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Redact columns from a dataframe with the default redactors — redact_columns","text":"data, columns specified columns duly redacted","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/redact_columns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Redact columns from a dataframe with the default redactors — redact_columns","text":"column names given columns argument treated regular expressions, however always ^ $ added beginning end strings. like match column starts string sensitive (e.g. sensitive_name, sensitive_date) use \"sensitive.* catch columns (though catch column called most_sensitive_name). standard redactors replace values column following values based columns type: integer -- 9L numeric -- 9 character -- \"[redacted]\" POSIXct (date times) -- .POSIXct(\"1988-10-11T17:00:00\", tz = tzone)","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/redact_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Redact columns from a dataframe with the default redactors — redact_columns","text":"","code":"if (check_for_pkg(\"nycflights13\", message)) {   small_flights <- head(nycflights13::flights)    # with no columns specified, redacting does nothing   redact_columns(small_flights, columns = NULL)    # integer   redact_columns(small_flights, columns = c(\"arr_time\"))    # numeric   redact_columns(small_flights, columns = c(\"arr_delay\"))    # characters   redact_columns(small_flights, columns = c(\"origin\", \"dest\"))    # datetiems   redact_columns(small_flights, columns = c(\"time_hour\")) } #> # A tibble: 6 × 19 #>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time #>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int> #> 1  2013     1     1      517            515         2      830            819 #> 2  2013     1     1      533            529         4      850            830 #> 3  2013     1     1      542            540         2      923            850 #> 4  2013     1     1      544            545        -1     1004           1022 #> 5  2013     1     1      554            600        -6      812            837 #> 6  2013     1     1      554            558        -4      740            728 #> # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, #> #   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, #> #   hour <dbl>, minute <dbl>, time_hour <dttm>"},{"path":"https://dittodb.jonkeane.com/dev/reference/sanitize_table_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Sanitize Table id — sanitize_table_id","title":"Sanitize Table id — sanitize_table_id","text":"Tables identified specified large number ways across drivers. purposes dittodb, details less important since almost always just want flat representation (ie filenames). takes various formats returns string various elements separated dots.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/sanitize_table_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sanitize Table id — sanitize_table_id","text":"","code":"sanitize_table_id(id, ...)"},{"path":"https://dittodb.jonkeane.com/dev/reference/sanitize_table_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sanitize Table id — sanitize_table_id","text":"id table identifier (Id, vector strings, string) ... additional arguments (allow things like schema_name odbc uses.)","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/sanitize_table_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sanitize Table id — sanitize_table_id","text":"first word statement","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/serialize_bit64.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a data.frame with pre-serialized integer64 columns — serialize_bit64","title":"Make a data.frame with pre-serialized integer64 columns — serialize_bit64","text":"integer64 types dput wells hexNumeric. Instead, serialize unserialize cf truecluster/bit64#27 store one expression per column makes resulting data.frame awkward, recorded dput way get read back faithfully (long expression quoted).","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/serialize_bit64.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a data.frame with pre-serialized integer64 columns — serialize_bit64","text":"","code":"serialize_bit64(df_in)"},{"path":"https://dittodb.jonkeane.com/dev/reference/serialize_bit64.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a data.frame with pre-serialized integer64 columns — serialize_bit64","text":"df_in data.frame pre-serialize integer64 columns ","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/serialize_bit64.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a data.frame with pre-serialized integer64 columns — serialize_bit64","text":"data.frame integer64 column serialized expression ","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/set_dittodb_debug_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Set dittodb's debug level — set_dittodb_debug_level","title":"Set dittodb's debug level — set_dittodb_debug_level","text":"can helpful see going increasing dittodb's verbosity show going hood (e.g. queries requested, ). sets option dittodb.debug value given level argument. option can set directly options(dittodb.debug = n) well.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/set_dittodb_debug_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set dittodb's debug level — set_dittodb_debug_level","text":"","code":"set_dittodb_debug_level(level)"},{"path":"https://dittodb.jonkeane.com/dev/reference/set_dittodb_debug_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set dittodb's debug level — set_dittodb_debug_level","text":"level numeric, level set (e.g. 1)","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/set_dittodb_debug_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set dittodb's debug level — set_dittodb_debug_level","text":"level, invisibly","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/set_dittodb_debug_level.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set dittodb's debug level — set_dittodb_debug_level","text":"level argument numeric, 0 default (relatively) silent. higher level, verbose dittodb . Currently, dittodb one level debugging (value 1 greater), might used future.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/set_dittodb_debug_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set dittodb's debug level — set_dittodb_debug_level","text":"","code":"set_dittodb_debug_level(1) set_dittodb_debug_level(0)"},{"path":"https://dittodb.jonkeane.com/dev/reference/use_dittodb.html","id":null,"dir":"Reference","previous_headings":"","what":"Use dittodb in your tests — use_dittodb","title":"Use dittodb in your tests — use_dittodb","text":"like use dittodb package, already using testthat, use function add dittodb Suggests package DESCRIPTION loads tests/testthat/helper.R. Call setting new package test suite.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/use_dittodb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use dittodb in your tests — use_dittodb","text":"","code":"use_dittodb(path = \".\")"},{"path":"https://dittodb.jonkeane.com/dev/reference/use_dittodb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use dittodb in your tests — use_dittodb","text":"path character path package","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/use_dittodb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use dittodb in your tests — use_dittodb","text":"Nothing: called file system side effects.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/use_dittodb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use dittodb in your tests — use_dittodb","text":"function called path package source path argument. function idempotent: dittodb already added files, additional changes made. : add dittodb Suggests field DESCRIPTION file current working directory add library(dittodb) file tests/testthat/helper.R (creating already exist)","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/use_dittodb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use dittodb in your tests — use_dittodb","text":"","code":"if (FALSE) { use_dittodb() use_dittodb(\"/path/to/package\") }"},{"path":"https://dittodb.jonkeane.com/dev/reference/with_mock_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the DBI queries in an alternate mock directory — with_mock_path","title":"Run the DBI queries in an alternate mock directory — with_mock_path","text":"testing dittodb, wrap tests with_mock_path({}) use database fixtures located directories. dittodb look fixtures directory specified user, can temporary permanent location.","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/with_mock_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the DBI queries in an alternate mock directory — with_mock_path","text":"","code":"with_mock_path(path, expr, replace = FALSE)"},{"path":"https://dittodb.jonkeane.com/dev/reference/with_mock_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the DBI queries in an alternate mock directory — with_mock_path","text":"path alternate directory expr expression execute replace logical, path replace current mock paths (TRUE) appended (beginning) current mock paths (default, FALSE)","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/with_mock_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the DBI queries in an alternate mock directory — with_mock_path","text":"nothing, called execute expression(s) expr","code":""},{"path":"https://dittodb.jonkeane.com/dev/reference/with_mock_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run the DBI queries in an alternate mock directory — with_mock_path","text":"","code":"# Only run if RSQLite and testthat are available if (check_for_pkg(\"RSQLite\", message) & check_for_pkg(\"testthat\", message)) {   with_mock_path(     system.file(\"nycflight_mocks\", package = \"dittodb\"),     with_mock_db({       con <- DBI::dbConnect(         RSQLite::SQLite(),         dbname = \"nycflights\"       )        one_airline <- dbGetQuery(         con,         \"SELECT carrier, name FROM airlines LIMIT 1\"       )       testthat::test_that(\"We get one airline\", {         testthat::expect_s3_class(one_airline, \"data.frame\")         testthat::expect_equal(nrow(one_airline), 1)         testthat::expect_equal(one_airline$carrier, \"9E\")         testthat::expect_equal(one_airline$name, \"Endeavor Air Inc.\")       })       one_airline     })   ) } #> Test passed 🌈 #>   carrier              name #> 1      9E Endeavor Air Inc."},{"path":[]},{"path":"https://dittodb.jonkeane.com/dev/news/index.html","id":"dittodb-017","dir":"Changelog","previous_headings":"","what":"dittodb 0.1.7","title":"dittodb 0.1.7","text":"CRAN release: 2023-08-13 Added better capture support unknown databases including better capture support Teradata databases. (#176, @sandstumpen)","code":""},{"path":"https://dittodb.jonkeane.com/dev/news/index.html","id":"dittodb-016","dir":"Changelog","previous_headings":"","what":"dittodb 0.1.6","title":"dittodb 0.1.6","text":"CRAN release: 2023-04-17 Bugfix integer64 roundtrips. Instead falling back non-hexNumeric output, serialize first maintain hexNumeric output.","code":""},{"path":"https://dittodb.jonkeane.com/dev/news/index.html","id":"dittodb-015","dir":"Changelog","previous_headings":"","what":"dittodb 0.1.5","title":"dittodb 0.1.5","text":"CRAN release: 2023-04-13 now better support {dbplyr} editions: mocks transparently use whatever backend supports now (#169) Improved bigint support (thanks @majazaloznik reporting issue, #168) Quoting reliable (e.g. quotes doubled RPostgres drivers), uncovered change {dbplyr} query optimizations (#172) SQLite databases Removed “travelling” vignette since much better ways something like now (e.g. {duckdb})","code":""},{"path":"https://dittodb.jonkeane.com/dev/news/index.html","id":"internals-0-1-5","dir":"Changelog","previous_headings":"","what":"Internals","title":"dittodb 0.1.5","text":"Switched semi-hacky C-based approach creating mock connections, now uses tracing like capturing already (#167) Various test improvements (thanks @majazaloznik) Removed expect_silent() one test satisfy R devel bug (#172) pkgdown site render correctly (thanks @maelle, #173)","code":""},{"path":"https://dittodb.jonkeane.com/dev/news/index.html","id":"dittodb-014","dir":"Changelog","previous_headings":"","what":"dittodb 0.1.4","title":"dittodb 0.1.4","text":"CRAN release: 2022-06-17 Allow support mocking transactions (full support transactions different mock directories still planned future) Add support quoting Postgres","code":""},{"path":"https://dittodb.jonkeane.com/dev/news/index.html","id":"dittodb-013","dir":"Changelog","previous_headings":"","what":"dittodb 0.1.3","title":"dittodb 0.1.3","text":"CRAN release: 2020-10-10 Minor CRAN update makes vignette execution conditional Suggests packages available.","code":""},{"path":"https://dittodb.jonkeane.com/dev/news/index.html","id":"dittodb-012","dir":"Changelog","previous_headings":"","what":"dittodb 0.1.2","title":"dittodb 0.1.2","text":"CRAN release: 2020-10-08","code":""},{"path":"https://dittodb.jonkeane.com/dev/news/index.html","id":"new-features-0-1-2","dir":"Changelog","previous_headings":"","what":"New features","title":"dittodb 0.1.2","text":"Experimental support [expect_sql()] check specific SQL statement sent test without needing fixture. Useful want need check specific query sent don’t need check code . feature experimental, might change subsequent release.","code":""},{"path":"https://dittodb.jonkeane.com/dev/news/index.html","id":"bug-fixes-and-test-improvements-0-1-2","dir":"Changelog","previous_headings":"","what":"Bug fixes and test improvements","title":"dittodb 0.1.2","text":"ODBC connections specify dsn now use dsn path (@klmr, #132). Compatibility forthcoming {testthat} 3e. Test changes {dbplyr} (@hadley, #134). Internal updates changes upcoming {dbplyr} release.","code":""},{"path":"https://dittodb.jonkeane.com/dev/news/index.html","id":"dittodb-011","dir":"Changelog","previous_headings":"","what":"dittodb 0.1.1","title":"dittodb 0.1.1","text":"CRAN release: 2020-07-29 Minor CRAN update makes tests examples conditional Suggests packages available.","code":""},{"path":"https://dittodb.jonkeane.com/dev/news/index.html","id":"dittodb-010","dir":"Changelog","previous_headings":"","what":"dittodb 0.1.0","title":"dittodb 0.1.0","text":"CRAN release: 2020-07-24 Initial release functionality recording playing back database fixtures number DBI-based drivers ({RSQLite}, {RPostgres}, {RMariaDB}, {RPostgreSQL}) Thanks @maelle PR#12 nycflights13_create_sql() now always uses {DBI} bug fixes cope {dbplyr}’s unique table name functions quoting","code":""}]
